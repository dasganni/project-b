"""
Django settings for django_server project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

# Access configparser to load variable values
import configparser
import os
## importing socket module
import socket
from django.core.management.utils import get_random_secret_key

#get environment of the server, defaults to prod
django_server_environment=os.getenv('DJANGO_SERVER_ENVIRONMENT','prod')

if(django_server_environment=="dev"):
    from django_server.development import *
else:
    from django_server.productive import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#create secret key in a file on first startup, if it does not exist
try:
    if not os.stat(os.path.join(BASE_DIR, "configs/secret_key")).st_size == 0:
        with open(os.path.join(BASE_DIR, "configs/secret_key")) as f:
            secret_key_value = f.read().strip()
    else:
        with open(os.path.join(BASE_DIR, "configs/secret_key"), "w+") as f:
            secret_key_value = get_random_secret_key()
            f.write(secret_key_value)
except FileNotFoundError:
    with open(os.path.join(BASE_DIR, "configs/secret_key"), "w+") as f:
        secret_key_value = get_random_secret_key()
        f.write(secret_key_value)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secret_key_value

## getting the hostname by socket.gethostname() method
hostname = socket.gethostname()
## getting the IP address using socket.gethostbyname() method
ip_address = socket.gethostbyname(hostname)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# Access configparser to load variable values
config = configparser.ConfigParser(allow_no_value=True)
config.read([os.path.join(BASE_DIR, "django_server/default.cfg"), os.path.join(BASE_DIR, "configs/settings.cfg")])

#Allowed Hostnames
public_hosts_string = config.get("default", "publichostname")
public_hosts_list = public_hosts_string.split(" ")
public_hosts_list.append(ip_address)
public_hosts_list.extend(["127.0.0.1", "0.0.0.0", "localhost"])
ALLOWED_HOSTS = public_hosts_list

#add writing ip_address to config file to see the ip in the used hosts too


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "guardian",
    "bootstrap4",
    "maptool",
    "dice",
    "character",
    "index",
    "settings",
    "game",
    "servererrors",
    "usermanager.apps.UsermanagerConfig",
]

SITE_ID = 1

if not config.getboolean("authentication", "enableNewUserRegistration"):
    # Disable new users signup
    # look at users/adapter.py
    ACCOUNT_ADAPTER = 'django_server.adapter.NoNewUsersAccountAdapter'


SOCIALACCOUNT_PROVIDERS = {}

# Facebook-Authentication
if config.getboolean("authentication", "useFacebookAuth"):
    INSTALLED_APPS.append("allauth.socialaccount.providers.facebook")

    SOCIALACCOUNT_PROVIDERS.update(
        {
            "facebook": {
                "METHOD": "oauth2",
                "SCOPE": ["email", "public_profile", "user_friends"],
                "AUTH_PARAMS": {"auth_type": "reauthenticate"},
                "APP": {
                    "client_id": config.get("authentication", "facebookAppID"),
                    "secret": config.get("authentication", "facebookAppKey"),
                },
                "FIELDS": [
                    "id",
                    "email",
                    "name",
                    "first_name",
                    "last_name",
                    "verified",
                    "locale",
                    "timezone",
                    "link",
                    "gender",
                    "updated_time",
                ],
                "EXCHANGE_TOKEN": True,
                "VERIFIED_EMAIL": False,
                "VERSION": "v2.4",
            }
        }
    )

# Google-Authentication
if config.getboolean("authentication", "useGoogleAuth"):
    INSTALLED_APPS.append("allauth.socialaccount.providers.google")

    SOCIALACCOUNT_PROVIDERS.update(
        {
            "google": {
                "SCOPE": ["profile", "email",],
                "AUTH_PARAMS": {"access_type": "online",},
                "APP": {
                    "client_id": config.get("authentication", "googleClientID"),
                    "secret": config.get("authentication", "googleClientSecret"),
                },
            }
        }
    )


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "django_server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "templates", "allauth"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
]


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 8},
    },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
    "guardian.backends.ObjectPermissionBackend",
)

AUTH_USER_MODEL = "usermanager.User"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}


DATABASES = {
    'default': {
        'ENGINE': os.getenv('DJANGO_DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME':  os.getenv('DJANGO_DB_NAME', 'pnp-manager'),
        'USER':  os.getenv('DJANGO_DB_USER', 'pnp-manager'),
        'PASSWORD':  os.getenv('DJANGO_DB_PASSWORD', 'pnp-manager'),
        'HOST':  os.getenv('DJANGO_DB_HOST', 'database'),
        'PORT':  os.getenv('DJANGO_DB_PORT', '5432'),
    }
}




# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_DIR = os.path.join(BASE_DIR, "static")
STATIC_ROOT = os.path.join(BASE_DIR, "allstaticfiles")
STATICFILES_DIRS = [
    STATIC_DIR,
]

MEDIA_DIR = os.path.join(BASE_DIR, "media")
# User Media
MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = "/media/"

# Email
EMAIL_SERVICE_USED = config.getboolean("mailserver", "usemailSending")

EMAIL_HOST = config.get("mailserver", "emailHost")
EMAIL_PORT = config.get("mailserver", "emailPort")
EMAIL_HOST_USER = config.get("mailserver", "emailHostUser")
EMAIL_HOST_PASSWORD = config.get("mailserver", "emailHostUserPassword")
EMAIL_USE_TLS = config.getboolean("mailserver", "emailUseTLS")
DEFAULT_FROM_EMAIL = config.get("mailserver", "defaultFromEmail")

# Other
MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"


# Allauth Configs
LOGIN_REDIRECT_URL = "index:index"
LOGOUT_REDIRECT_URL = "index:index"
ACCOUNT_LOGOUT_REDIRECT_URL = "index:index"

ACCOUNT_EMAIL_VERIFICATION = "none"

ACCOUNT_AUTHENTICATION_METHOD = "username_email"

ACCOUNT_PRESERVE_USERNAME_CASING = False

ACCOUNT_USERNAME_MIN_LENGTH = 3
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQURIED = True
ACCOUNT_UNIQUE_EMAIL = True

ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"

# Guardian Settings
GUARDIAN_RAISE_403 = True
